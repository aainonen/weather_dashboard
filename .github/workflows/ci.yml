name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: ${{ secrets.DB_NAME }}
      OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      DEBUG: "True"

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: "${{ env.DB_USER }}"
          POSTGRES_PASSWORD: "${{ env.DB_PASSWORD }}"
          POSTGRES_DB: "${{ env.DB_NAME }}"
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${{ env.DB_USER }} -d ${{ env.DB_NAME }}"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools wheel
          for i in {1..10}; do 
            pip install -r requirements.txt -i https://pypi.org/simple && break || (pip freeze && sleep 15); 
          done
          pip install flake8

      - name: Lint code with flake8
        run: |
          source venv/bin/activate
          flake8

      - name: Run tests with pytest
        run: |
          source venv/bin/activate
          export PYTHONPATH=.
          pytest

      - name: Build Docker image for app
        run: docker build -t weather_dashboard .

      - name: Write test.env file
        run: |
          echo "OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }}" > test.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> test.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> test.env
          echo "DB_HOST=localhost" >> test.env
          echo "DB_PORT=5432" >> test.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> test.env

      - name: Build Docker image for tests
        run: docker build -t weather_dashboard_test .

      - name: Run tests in Docker container
        run: |
          docker run --env-file test.env -e PYTHONPATH=/app weather_dashboard_test pytest

